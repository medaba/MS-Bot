# -*- coding: utf-8 -*-

from aiogram import types
from aiogram.dispatcher.filters.builtin import Text
from aiogram.types import InlineQuery

import config
from keyboards import inline_kb
from loader import dp
from utils.db_api import mscenter_table, all_city_names


@dp.inline_handler(Text(all_city_names, ignore_case=True))
async def show_msc_in_city(query: InlineQuery):
    city = query.query.title()
    answer = await create_answer(city)

    await query.answer(
        results=[
            types.InlineQueryResultArticle(
                id="unknown",
                thumb_url="https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/96/hospital_1f3e5.png",
                title=f"üè• –†–°-—Ü–µ–Ω—Ç—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ: {city}",
                input_message_content=types.InputMessageContent(
                    message_text=answer,
                    parse_mode="Markdown"
                )
            )
        ],
    )


@dp.inline_handler(regexp="\w")
async def show_msc(query: InlineQuery):
    city: str = query.query.title()
    results = []

    for city_name in all_city_names:
        if city_name.lower().startswith(city.lower()):
            answer = await create_answer(city_name)
            results.append(
                types.InlineQueryResultArticle(
                    id=f"{city_name}",
                    thumb_url="https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/96/hospital_1f3e5.png",
                    title=f"üè• –†–°-—Ü–µ–Ω—Ç—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ: {city_name}",
                    input_message_content=types.InputTextMessageContent(
                        message_text=answer,
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    ),
                    reply_markup=inline_kb.bot_link()
                )
            )

    if not results:
        results.append(
            types.InlineQueryResultArticle(
                id=f"{city}",
                thumb_url="https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Crystal_button_cancel.svg/150px-Crystal_button_cancel.svg.png",
                title=f"üö´ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –†–°-—Ü–µ–Ω—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                input_message_content=types.InputTextMessageContent(
                    message_text="üè• –û—Ç–∫—Ä—ã—Ç–∞—è –±–∞–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤, –∑–∞–Ω–∏–º–∞—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –†–∞—Å—Å–µ—è–Ω–Ω–æ–≥–æ —Å–∫–ª–µ—Ä–æ–∑–∞:\n"
                                 f"[–ë–∞–∑–∞ –†–°-–¶–µ–Ω—Ç—Ä–æ–≤]({config.MS_CENTERS})\n\n"
                                 f"‚úÖ –ï—â–µ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –±–æ—Ç–∞.\n\n"
                                 "‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏, —á—Ç–æ –≤ –±–∞–∑–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ *—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ* –†–°-—Ü–µ–Ω—Ç—Ä–∞,"
                                 "*–∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –ø—Ä–∏–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –û–ú–°*, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–¥—Ä–µ—Å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–π "
                                 f"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –õ–° –±–æ—Ç—É.",
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                ),
                reply_markup=inline_kb.bot_link()
            )
        )

    await query.answer(
        results=results
    )


async def create_answer(city):
    msc_list = await mscenter_table.fetch_all_msc_in_city(city)
    answer = f"üè• <b>–†–°-—Ü–µ–Ω—Ç—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ: {city}</b>\n\n"

    if not msc_list:
        answer += "üö´ –ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    else:
        for msc in msc_list:
            answer += f"üî∏ {msc[2]}\n–ê–¥—Ä–µ—Å: {msc[3]}\n\n"
        answer += f"‚úÖ –ï—â–µ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –±–æ—Ç–∞:"

    return answer
