# -*- coding: utf-8 -*-

try:
    import ujson as json
    print("ujson: ok")
except:
    import json

import asyncio
import logging

from aiogram import types
from aiogram.types import Message
from aiogram.types import ChatType
from aiogram.bot import api
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from geopy.distance import distance

import config
import keyboards
from database import AioSQL
from polls_ids import polls_id


logging.basicConfig(
    level=logging.INFO,
    filename='logger.log',
    filemode='a',
    format='%(asctime)s | %(name)s | %(levelname)-4s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
    )


if config.from_russia is True:
    # –ü–æ–¥–º–µ–Ω–∞ –±–∞–∑–æ–≤–æ–≥–æ URL –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –†–æ—Å—Å–∏–∏
    PATCHED_URL = "https://telegg.ru/orig/bot{token}/{method}"
    setattr(api, 'API_URL', PATCHED_URL)


bot = Bot(token=config.token, parse_mode="Markdown")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


async def startup(*args):
    try:
        await bot.send_message(chat_id=config.main_admin, text="–ë–∞–∑–∞, —è –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ")
    except Exception as e:
        print(e)

async def shutdown(*args):
    try:
        await bot.send_message(chat_id=config.main_admin, text="–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå")
    except Exception as e:
        print(e)


async def main_menu(m: Message):
    await m.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboards.main_menu()
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞, –∏–ª–∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü.
    try:
        await AioSQL.get_user_polls_page(m.from_user.id)
        await AioSQL.update_user(m.from_user.id, 0)
    except:
        await AioSQL.add_user(m.from_user.id, 0)


@dp.message_handler(ChatType.is_private, commands=['start'])
async def start(m: Message):
    await main_menu(m)


# @dp.message_handler(content_types=["any"])
# async def send_json(m: Message):
#     print("ok")
#     print(str(m.as_json()))
#     # answer = json.dumps(m, indent=2, ensure_ascii=False)
#     # print(answer)
#     await bot.send_message(
#         m.chat.id,
#         str(m.as_json())
#     )


@dp.message_handler(ChatType.is_private, text="üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def show_main_menu(m: Message):
    await main_menu(m)


@dp.message_handler(ChatType.is_private, text=['ü§ñ –û –ë–æ—Ç–µ'])
async def info(m: Message):
    await m.answer(
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ. \n\n"
    )


@dp.message_handler(ChatType.is_private, text=['üîó –°—Å—ã–ª–∫–∏'])
async def links(m: Message):
    await m.answer(
        "*–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏* üçÄ \n\n"
        "*Telegram-–∫–∞–Ω–∞–ª—ã*: \n\n"
        "üî∏ [–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∫–ª–µ—Ä–æ–∑–Ω–∏–∫–∞](https://t.me/biblioteka_skleroznika), "
        "–∫—É–¥–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤—ã–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è —Å—Ç–∞—Ç—å–∏, –∫–Ω–∏–≥–∏ –∏ –≤–∏–¥–µ–æ –ø–æ –†–° –∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ –≤ —Ü–µ–ª–æ–º.\n\n"
        "üî∏ [–†–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–∫–ª–µ—Ä–æ–∑](https://t.me/msneurol) - —Ç–µ–ª–µ–≥—Ä–∞–º-—ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è –ø–æ –†–°.\n\n"
        "*–ü—Ä–æ—á–µ–µ*: \n\n"
        "üî∏ [–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä EDSS](http://edss.neurol.ru/edss_ru/) - –æ–Ω–ª–∞–π–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä "
        "–¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–µ–ø–µ–Ω–∏ –∏–Ω–≤–∞–ª–∏–¥–∏–∑–∞—Ü–∏–∏ –±–æ–ª—å–Ω—ã—Ö –†–°. –í–µ—Ä—Å–∏—è –¥–ª—è –≤—Ä–∞—á–µ–π –Ω–µ–≤—Ä–æ–ª–æ–≥–æ–≤.\n\n"
        "üî∏ [–ú–æ—Å–û–†–°](http://mosors.ru/) - —Å–∞–π—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –†–°-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n",
        disable_web_page_preview=True
    )


@dp.message_handler(ChatType.is_private, text=['‚ô•Ô∏è –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è'])
async def rehab(m: Message):
    await m.answer(
        "*–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏. –ö—É—Ä—Å –º–æ–ª–æ–¥–æ–≥–æ –±–æ–π—Ü–∞* Ô∏èü§∫Ô∏è\n\n"
        "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏ —Ä–∞—Å—Å–µ—è–Ω–Ω–æ–º —Å–∫–ª–µ—Ä–æ–∑–µ, "
        "–ø–æ–∑–≤–æ–ª—è—é—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –∑–∞–º–µ—Ç–Ω–æ —É–ª—É—á—à–∏—Ç—å –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. \n\n\n"
        "üî∏ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π: "
        "[–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (YouTube)](https://www.youtube.com/watch?v=isWWtIwdiQE)\n\n"
        "üî∏ –†–∞–∑–≤–∏—Ç–∏–µ –º–µ–ª–∫–æ–π –º–æ—Ç–æ—Ä–∏–∫–∏ –ø–∞–ª—å—Ü–µ–≤: "
        "[YouTube/ENG](https://www.youtube.com/watch?v=sB4lXUhRfMU&feature=youtu.be)\n\n"
        "üî∏ 10 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Å—Ç–æ–ø: [—Å–∞–π—Ç/—Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏](https://mednew.site/sport/10-uprazhnenij-dlya-stop)\n\n"
        "üî∏ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ª–µ—Ç—á–∏–∫–æ–≤: [–≤–∏–¥–µ–æ](https://t.me/mscler/39573)\n\n"
        "üî∏ –ö—É—Ä—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –≤–µ—Å—Ç–∏–±—É–ª—è—Ä–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞: "
        "[—Å–∞–π—Ç/—Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏](https://vladmedicina.ru/persons/p52698.htm)\n\n",
        disable_web_page_preview=True
    )


@dp.message_handler(ChatType.is_private, text=['üìú –û–ø—Ä–æ—Å—ã'])
async def polls(m: Message):
    await m.answer(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï. –î–∞–ª–µ–µ –∏–¥—ë—Ç –±–ª–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ c –†–∞—Å—Å–µ—è–Ω–Ω—ã–º —Å–∫–ª–µ—Ä–æ–∑–æ–º \n\n"
        "–ï—Å–ª–∏ –±–æ–ª–µ–µ—Ç–µ –Ω–µ –≤—ã, –∞ –≤–∞—à –±–ª–∏–∑–∫–∏–π, —Ç–æ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç –µ–≥–æ –ª–∏—Ü–∞. \n\n"
        "–ï—Å–ª–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, "
        "—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å –∏ –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n\n\n"
        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—á–∞–ª—É –æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–í–ø–µ—Ä–µ–¥ >>'",
        reply_markup=keyboards.polls_navigation()
    )


@dp.message_handler(ChatType.is_private, text=['üßë‚Äç‚öïÔ∏è –†–°-–¶–µ–Ω—Ç—Ä—ã'])
async def main_msc(m: Message):
    await m.answer(
        "–î–∞–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä",
        reply_markup=keyboards.msc()
    )


@dp.message_handler(ChatType.is_private, text=['üåç –í—Å–µ —Ü–µ–Ω—Ç—Ä—ã'])
async def show_all_msc(m: Message):
    await m.answer(
        "*–°–ø–∏—Å–æ–∫ –¶–µ–Ω—Ç—Ä–æ–≤ –†–∞—Å—Å–µ—è–Ω–Ω–æ–≥–æ –°–∫–ª–µ—Ä–æ–∑–∞* \n\n"
        '[telegra.ph](https://telegra.ph/Spisok-RS-Centrov-06-08-19) | '
        '[–∑–µ—Ä–∫–∞–ª–æ](https://tgraph.io/Spisok-RS-Centrov-06-08-19)'
    )


@dp.message_handler(ChatType.is_private, content_types=['location'])
async def proc_location(m: Message):
    user_coords = (m.location.latitude, m.location.longitude) # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_msc = await AioSQL.get_all_msc()                      # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Ä—Å-—Ü–µ–Ω—Ç—Ä–æ–≤ –∏–∑ –ë–î
    best_distance = 1000000               # "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ" —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞ –¥–æ —Ä—Å—Ü
    best_address = None

    for msc in all_msc:
        msc_coords = (msc[4], msc[5])              # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä—Å-—Ü–µ–Ω—Ç—Ä–∞
        dist = distance(user_coords, msc_coords)   # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —é–∑–µ—Ä–∞, –¥–æ —Ä—Å-—Ü–µ–Ω—Ç—Ä–∞

        if dist < best_distance:
            best_distance = dist
            best_address = msc

    await bot.delete_message(
        m.chat.id,
        m.message_id
    )

    answer = ", ".join(best_address[:4])
    await m.answer(
        "–ë–ª–∏–∂–∞–π—à–∏–π –æ—Ç –≤–∞—Å –¶–µ–Ω—Ç—Ä –†–∞—Å—Å–µ—è–Ω–Ω–æ–≥–æ C–∫–ª–µ—Ä–æ–∑–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: \n\n"
        f"{answer} \n"
        f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {round(best_distance.km, 1)} –∫–º."
    )

    await asyncio.sleep(1)

    await bot.send_venue(
        m.chat.id,
        best_address[4],
        best_address[5],
        best_address[3],
        best_address[2]
    )


@dp.message_handler(ChatType.is_private, text=['‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã'])
async def contacts(m: Message):
    await m.answer(
        "*–ö–æ–Ω—Ç–∞–∫—Ç—ã*"
    )


@dp.message_handler(ChatType.is_private, text=["–í–ø–µ—Ä–µ–¥ >>"])
async def info(m: Message):
    current_polls_page = await AioSQL.get_user_polls_page(m.from_user.id)
    next_page = current_polls_page + 1
    if next_page <= len(polls_id):
        poll_id = polls_id[next_page]
        await bot.forward_message(m.from_user.id, config.main_admin, poll_id)
        await AioSQL.update_user(m.from_user.id, next_page)
    elif next_page > len(polls_id):
        await m.answer(
            "–ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –æ–ø—Ä–æ—Å–æ–≤"
        )


@dp.message_handler(ChatType.is_private, text=["<< –ù–∞–∑–∞–¥"])
async def info(m: Message):
    current_polls_page = await AioSQL.get_user_polls_page(m.from_user.id)
    previous_page = current_polls_page - 1
    if previous_page > 0:
        poll_id = polls_id[previous_page]
        await bot.forward_message(m.from_user.id, config.main_admin, poll_id)
        await AioSQL.update_user(m.from_user.id, previous_page)


@dp.message_handler(ChatType.is_private, text=["‚èÆÔ∏è –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–æ–≤"])
async def info(m: Message):
    await AioSQL.update_user(m.from_user.id, 0)
    await polls(m)


@dp.message_handler(commands=['myid'])
async def my_id(m: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ ID –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    """
    await m.answer(
        "–í–∞—à ID üëá \n\n"
        f"`{m.from_user.id}`"
    )


async def i_am_alive(sleep_for=28800):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ñ-—è.
    –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ loop –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 'sleep_for' —Å–µ–∫—É–Ω–¥.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 'sleep_for' —Å–µ–∫—É–Ω–¥.
    """
    while True:
        await bot.send_message(
            config.main_admin,
            "I am alive ",
            disable_notification=True
        )
        await asyncio.sleep(sleep_for)   # –ü–∞—É–∑–∞. –¶–∏–∫–ª –∑–∞–º–∏—Ä–∞–µ—Ç –Ω–∞ sleep_for —Å–µ–∫—É–Ω–¥


if __name__ == '__main__':
    dp.loop.create_task(i_am_alive())

    if config.webhook is False:
        executor.start_polling(dp, skip_updates=True, on_startup=startup, on_shutdown=shutdown, relax=0.5)
